package com.fatwire.cs.rest.util;

import java.io.File;
import java.io.IOException;

import junit.framework.TestCase;

import org.apache.commons.io.FileUtils;

public class Base64Test extends TestCase {
    static final String x = "";

    private void AAtestDecode() throws IOException {
        //String x = "";//ICAgICAgLy8gTWFrZSBzdXJlIHRoZSBmaWxlIG9yIGRpcmVjdG9yeSBleGlzdHMgYW5kIGlzbid0IHdyaXRlIHByb3RlY3RlZA0KICAgICAgICBpZiAoIWZpbGVUb0RlbGV0ZS5leGlzdHMoKSkNCiAgICAgICAgew0KICAgICAgICAgICAgLy90aGlzIGlzIG5vdCBuZWNlc3NhcmlseSBhbiBlcnJvciBjb25kaXRpb24sIGhlbmNlIHdlIGFyZSBOT1Qgc2V0dGluZyBoYXNFcnJvciB0byB0cnVlLg0KICAgICAgICAgICAgbG9nLndhcm4oIkRlbGV0ZTogbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogIiArIGZpbGVQYXRoKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFmaWxlVG9EZWxldGUuY2FuV3JpdGUoKSl7DQogICAgICAgICAgICBsb2cud2FybigiRGVsZXRlOiB3cml0ZSBwcm90ZWN0ZWQ6ICIgKyBmaWxlUGF0aCk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBJZiBpdCBpcyBhIGRpcmVjdG9yeSwgbWFrZSBzdXJlIGl0IGlzIGVtcHR5DQogICAgICAgIGlmIChmaWxlVG9EZWxldGUuaXNEaXJlY3RvcnkoKSkgew0KICAgICAgICAgICAgU3RyaW5nW10gZmlsZXMgPSBmaWxlVG9EZWxldGUubGlzdCgpOw0KICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApDQogICAgICAgICAgICAgICAgbG9nLndhcm4oIkRlbGV0ZTogZGlyZWN0b3J5IG5vdCBlbXB0eTogIiArIGZpbGVQYXRoKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEF0dGVtcHQgdG8gZGVsZXRlIGl0DQogICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGZpbGVUb0RlbGV0ZS5kZWxldGUoKTsNCg0KICAgICAgICBpZiAoIXN1Y2Nlc3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIGxvZy53YXJuKCJEZWxldGU6IGRlbGV0aW9uIGZhaWxlZCBmb3IgIiArIGZpbGVQYXRoKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlew0KICAgICAgICAgICAgbG9nLmluZm8oIlN1Y2Nlc3MgaW4gZGVsZXRpbmcgIiArIGZpbGVQYXRoKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gc3VjY2VzczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBydW5zIFNRTCBzdG1zIHByb3ZpZGVkIGluIHRoZSBhcmd1bWVudHMNCiAgICAgKiBAcGFyYW0gc3FsU3RtDQogICAgICogQHBhcmFtIHRhYmxlcw0KICAgICAqIEBwYXJhbSBpY3MNCiAgICAgKiBAcmV0dXJuIC0tIGlMaXN0IG9mIHRoZSByZXN1bHRzZXQgZnJvbSBEQg0KICAgICAqLw0KICAgIHB1YmxpYyBJTGlzdCBydW5TUUwoU3RyaW5nIHNxbFN0bSwgU3RyaW5nIHRhYmxlcywgSUNTIGljcyl7DQogICAgICAgIGljcy5DbGVhckVycm5vKCk7DQogICAgICAgIFN0cmluZ0J1ZmZlciBlcnJzdHIgPSBuZXcgU3RyaW5nQnVmZmVyKCk7DQogICAgICAgIGxvZy5kZWJ1ZygiQ2FsbGluZzogIiArIHNxbFN0bSk7DQogICAgICAgIElMaXN0IHNxbE91dHB1dElMaXN0ID0gbnVsbDsNCiAgICAgICAgc3FsT3V0cHV0SUxpc3QgPSBpY3MuU1FMKHRhYmxlcywgc3FsU3RtLCAic3FsT3V0cHV0SUxpc3QiLCAtMSwgdHJ1ZSwgZXJyc3RyKTsNCg0KICAgICAgICBpZihpY3MuR2V0RXJybm8oKTwwKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZihpY3MuR2V0RXJybm8oKSA9PSAtMTAxKXsNCiAgICAgICAgICAgICAgICBsb2cuaW5mbygiTm8gcm93cyByZXR1cm5lZCBmb3I6ICIgKyBzcWxTdG0pOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKCAiU1FMIEVycm9yICIgKyBpY3MuR2V0RXJybm8oKSArICIgb24gIiArIHNxbFN0bSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHNxbE91dHB1dElMaXN0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldHMgZGVmYXVsdCBmb2xkZXIgdG8gd2hpY2ggc3RhdGljIHB1Ymxpc2ggd2lsbCBwdWJsaXNoIHRoZSBhc3NldHMgdG8NCiAgICAgKiBAcGFyYW0gaWNzDQogICAgICovDQogICAgcHVibGljIHZvaWQgZ2V0UGF0aFByZWZpeChJQ1MgaWNzKXsNCiAgICAgICAgcGF0aFByZWZpeCA9IGljcy5HZXRQcm9wZXJ0eSgiY3MucGdleHBvcnRmb2xkZXIiLCAiZnV0dXJldGVuc2UuaW5pIiwgdHJ1ZSk7DQogICAgICAgIGlmKCFTdHJpbmdVdGlscy5lbmRzV2l0aChwYXRoUHJlZml4LCIvIikpew0KICAgICAgICAgICAgcGF0aFByZWZpeCA9IHBhdGhQcmVmaXgrIi8iOw0KICAgICAgICB9DQogICAgICAgIGxvZy50cmFjZSgiUGF0aCBwcmVmaXggd2FzIHNldCB0byBkZWZhdWx0ICIgKyBwYXRoUHJlZml4KTsNCiAgICAgICAgaWYoU3RyaW5nVXRpbHMuaXNOb3RCbGFuayhpY3MuR2V0VmFyKCJiYXNlRGlyIikpKXsNCiAgICAgICAgICAgIC8vIE1vZGlmaWVkOiByZ2lsbCwgMjAxMC0wOS0xNywgcmVwbGFjZWQgd2l0aCAoU3RyaW5nKWljcy5HZXRPYmooImJhc2VEaXIiKQ0KICAgICAgICAgICAgLy9wYXRoUHJlZml4ID0gcGF0aFByZWZpeCArIFN0cmluZ1V0aWxzLnN0cmlwKGljcy5HZXRWYXIoImJhc2VEaXIiKSwiLyIpKyIvIjsNCiAgICAgICAgICAgIHBhdGhQcmVmaXggPSBwYXRoUHJlZml4ICsgU3RyaW5nVXRpbHMuc3RyaXAoKFN0cmluZylpY3MuR2V0T2JqKCJiYXNlRGlyIiksIi8iKSsiLyI7DQogICAgICAgICAgICBsb2cuZGVidWcoImJhc2VEaXIgYXBwZW5kZWQgdG8gcGF0aFByZWZpeC4gTmV3IHBhdGhQcmVmaXg6ICIgKyBwYXRoUHJlZml4KTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBwdWJsaWMgU3RyaW5nIGNhbGN1bGF0ZUluY2x1ZGVQYXRoUHJlZml4KElDUyBpY3MpDQogICAgew0KICAgICAgICBpY3MuQ2xlYXJFcnJubygpOw0KICAgICAgICBGVFZhbExpc3QgYXJnc2xpc3QgPSBuZXcgRlRWYWxMaXN0KCk7DQogICAgICAgIGFyZ3NsaXN0LnB1dCgic2l0ZW5hbWUiLGljcy5HZXRWYXIoInNpdGUiKSk7DQogICAgICAgIGFyZ3NsaXN0LnB1dCgicHJlZml4Iiwic2EiKTsNCiAgICAgICAgaWNzLkNhbGxFbGVtZW50KCJHVS9jb21tb24vR2V0U2l0ZUF0dHJpYnV0ZXMiLGFyZ3NsaXN0KTsNCiAgICAgICAgaWYoaWNzLkdldEVycm5vKCkgPT0gMCB8fCBpY3MuR2V0RXJybm8oKSA9PSAtNTAwKXsNCiAgICAgICAgICAgIGljcy5DbGVhckVycm5vKCk7DQogICAgICAgICAgICBTdHJpbmcgc3RhdGljX3B1YmRlc3RpbmF0aW9uID0gaWNzLkdldFByb3BlcnR5KCJzdGF0aWNfcHViZGVzdGluYXRpb24iLCAiZ3VfY3VzdG9tLnByb3BlcnRpZXMiLCB0cnVlKTsNCiAgICAgICAgICAgIGlmKFN0cmluZ1V0aWxzLmlzTm90Qmxhbmsoc3RhdGljX3B1YmRlc3RpbmF0aW9uKSAmJiAoIVN0cmluZ1V0aWxzLmVxdWFsc0lnbm9yZUNhc2UoIlllcyIsIGljcy5HZXRWYXIoInNhOnN1cHByZXNzX3NpdGVfbmFtZSIpKSkpew0KICAgICAgICAgICAgICAgIHJldHVybiAiLyIgKyBpY3MuR2V0VmFyKCJzYTpzdGF0aWNfc3ViZG9tYWluIikgKyAiLyIgKyBpY3MuR2V0VmFyKCJzaXRlIikgKyAiLyI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmKFN0cmluZ1V0aWxzLmlzTm90Qmxhbmsoc3RhdGljX3B1YmRlc3RpbmF0aW9uKSAmJiBTdHJpbmdVdGlscy5lcXVhbHNJZ25vcmVDYXNlKCJZZXMiLCBpY3MuR2V0VmFyKCJzYTpzdXBwcmVzc19zaXRlX25hbWUiKSkpew0KICAgICAgICAgICAgICAgIHJldHVybiAiLyIgKyBpY3MuR2V0VmFyKCJzYTpzdGF0aWNfc3ViZG9tYWluIikgKyAiLyI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmKCFTdHJpbmdVdGlscy5lcXVhbHNJZ25vcmVDYXNlKCJZZXMiLCBpY3MuR2V0VmFyKCJzYTpzdXBwcmVzc19zaXRlX25hbWUiKSkpew0KICAgICAgICAgICAgICAgIHJldHVybiAiLyIgKyBpY3MuR2V0VmFyKCJzaXRlIikgKyAiLyI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWNzLkNsZWFyRXJybm8oKTsNCiAgICAgICAgcmV0dXJuICIvIjsNCiAgICB9DQogICAgcHVibGljIHZvaWQgcHJvY2Vzc1NTSU1vZHVsZShJQ1MgaWNzLCBGVFZhbExpc3QgYXJncywgU3RyaW5nIHRlbXBsYXRlX25hbWUpew0KICAgICAgICBTdHJpbmcgdGVtcGxhdGVBcmdzID0gYXJncy50b1N0cmluZygpOw0KICAgICAgICAvLyBNb2RpZmllZDogcmdpbGwsIDIwMTAtMDktMTcNCiAgICAgICAgLy8gY2hhbmdpbmcsIGljcy5HZXRTU1ZhcigicHVic2VzczppZCIpIHRvIChTdHJpbmcpaWNzLkdldE9iaigicHVic2VzczppZCIpDQogICAgICAgIFN0cmluZyBzcWxTdG0gPSAiU0VMRUNUIGNvdW50KCopIGFzIHByZXZwdWJjb3VudCBGUk9NIHN0YXRpY19wYWdlbGV0IFdIRVJFIHJlcXVlc3Q9JyIgKyBpY3MuR2V0VmFyKCJsaW5rdXJsIikgKyAiJyIgKyAiIEFORCB0YXJnZXRpZD0nIiArIGljcy5HZXRWYXIoInRhcmdldElEIikgKyAiJyBBTkQgcHVic2Vzc2lvbmlkPSciICsgaWNzLkdldFNTVmFyKCJwdWJzZXNzOmlkIikgKyAiJyI7DQogICAgICAgIFN0cmluZyB0YWJsZU5hbWVzID0gInN0YXRpY19wYWdlbGV0IjsNCiAgICAgICAgSUxpc3QgcHJldlB1YklMaXN0ID0gcnVuU1FMKHNxbFN0bSwgdGFibGVOYW1lcywgaWNzKTsNCiAgICAgICAgaWYobnVsbCAhPSBwcmV2UHViSUxpc3QgJiYgcHJldlB1YklMaXN0Lmhhc0RhdGEoKSl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgaW50IHByZXZQdWJDb3VudCA9IC0xOw0KICAgICAgICAgICAgICAgIGZvciAoSUxpc3Qgcm93IDogbmV3IEl0ZXJhYmxlSUxpc3RXcmFwcGVyKCBwcmV2UHViSUxpc3QpKXsNCiAgICAgICAgICAgICAgICAgICAgcHJldlB1YkNvdW50ID0gSW50ZWdlci5wYXJzZUludChyb3cuZ2V0VmFsdWUoInByZXZwdWJjb3VudCIpKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKHByZXZQdWJDb3VudCA+IDApew0KICAgICAgICAgICAgICAgICAgICBsb2cudHJhY2UoIk1vZHVsZSBhbHJlYWR5IHB1Ymxpc2hlZDoiICsgaWNzLkdldFZhcigibW9kdWxlX2lkIikpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKXsNCiAgICAgICAgICAgICAgICBpY3MuU2V0T2JqKCJoYXNFcnJvciIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuZ2V0TWVzc2FnZSgpLCBlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChOb1N1Y2hGaWVsZEV4Y2VwdGlvbiBlKXsNCiAgICAgICAgICAgICAgICBpY3MuU2V0T2JqKCJoYXNFcnJvciIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuZ2V0TWVzc2FnZSgpLCBlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAvLyBjb21tZW50ZWQgYnkgTG9rZXNoIDkvMjEvMjAxMCBhcyBwZXIgRG9sZidzIGZlZWRiYWNrDQogICAgICAgIC8qaWYobnVsbCAhPSBwcmV2UHViSUxpc3Qpew0KICAgICAgICAgICAgcHJldlB1YklMaXN0LmZsdXNoKCk7DQogICAgICAgIH0qLw0KICAgICAgICBzcWxTdG0gPSAiU0VMRUNUIGNvdW50KCopIGFzIGFwcHJvdmVkYXNzZXRjb3VudCBGUk9NIEFwcHJvdmVkQXNzZXRzIFdIRVJFIGFzc2V0aWQ9JyIgKyBpY3MuR2V0VmFyKCJtb2R1bGVfaWQiKSArICInIiArICIgQU5EIHRhcmdldGlkPSciICsgaWNzLkdldFZhcigidGFyZ2V0SUQiKSArICInIEFORCB0c3RhdGU9J0EnIjsNCiAgICAgICAgdGFibGVOYW1lcyA9ICJBcHByb3ZlZEFzc2V0cyI7DQogICAgICAgIElMaXN0IGFwcHJvdmVkQXNzZXRJTGlzdCA9IHJ1blNRTChzcWxTdG0sIHRhYmxlTmFtZXMsIGljcyk7DQogICAgICAgIGlmKG51bGwgIT0gYXBwcm92ZWRBc3NldElMaXN0JiYgYXBwcm92ZWRBc3NldElMaXN0Lmhhc0RhdGEoKSl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgaW50IGFwcHJvdmVkQXNzZXRDb3VudCA9IC0xOw0KICAgICAgICAgICAgICAgIGZvciAoSUxpc3Qgcm93IDogbmV3IEl0ZXJhYmxlSUxpc3RXcmFwcGVyKCBhcHByb3ZlZEFzc2V0SUxpc3QpKXsNCiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWRBc3NldENvdW50ID0gSW50ZWdlci5wYXJzZUludChyb3cuZ2V0VmFsdWUoImFwcHJvdmVkYXNzZXRjb3VudCIpKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKGFwcHJvdmVkQXNzZXRDb3VudCA8IDEpew0KICAgICAgICAgICAgICAgICAgICBsb2cudHJhY2UoIk1vZHVsZSBpcyBpbiBoZWxkIHN0YXRlIGFuZCB3b24ndCBiZSBwdWJsaXNoZWQ6IiArIGljcy5HZXRWYXIoIm1vZHVsZV9pZCIpKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSl7DQogICAgICAgICAgICAgICAgaWNzLlNldE9iaigiaGFzRXJyb3IiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlLmdldE1lc3NhZ2UoKSwgZSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoTm9TdWNoRmllbGRFeGNlcHRpb24gZSl7DQogICAgICAgICAgICAgICAgaWNzLlNldE9iaigiaGFzRXJyb3IiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlLmdldE1lc3NhZ2UoKSwgZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy9jb21tZW50ZWQgYnkgTG9rZXNoIG9uIDkvMjEvMjAxMA0KICAgICAgICAvKmlmKG51bGwgIT0gcHJldlB1YklMaXN0KXsNCiAgICAgICAgICAgIHByZXZQdWJJTGlzdC5mbHVzaCgpOw0KICAgICAgICB9Ki8NCiAgICAgICAgaWNzLkNsZWFyRXJybm8oKTsNCi8vcmVhZCB0aGUgcmVuZGVyZWQgcGFnZSBjb250ZW50IGludG8gYSBzdHJpbmcuDQoNCi8vICAgICAgICBsb2cuZGVidWcoIkNvbnRleHQgaXM6ICIgKyBpY3MuR2V0VmFyKCJjb250ZXh0IikpOw0KICAgICAgICBTdHJpbmcgdGhlUGFnZSA9IGljcy5SZWFkUGFnZSAoIGljcy5HZXRWYXIoInNpdGUiKSArICIvR1VfTW9kdWxlX0MvIiArIFN0cmluZ1V0aWxzLnN0cmlwKHRlbXBsYXRlX25hbWUsIi8iKSwgYXJncyk7DQogICAgICAgIGFyZ3MucmVtb3ZlQWxsKCk7DQogICAgICAgIGlmICggdGhlUGFnZSA9PSBudWxsICkgIHsNCiAgICAgICAgICAgIGludCBlcnJubyA9IGljcy5HZXRFcnJubygpOw0KICAgICAgICAgICAgaWYoZXJybm8gIT0gMCl7DQogICAgICAgICAgICAgICAgaWNzLkNsZWFyRXJybm8oKTsNCiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoIlRoZXJlIHdhcyBhbiBlcnJvciAoZXJybm8iICsgZXJybm8gKyAiKSB3aGlsZSByZWFkaW5nIHdyYXBwZXIgd2l0aCBtb2R1bGUgdXJsPSIgKyBpY3MuR2V0VmFyKCJsaW5rdXJsIikpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2UgIHsNCiAgICAgICAgICAgIGdldFBhdGhQcmVmaXgoaWNzKTsNCiAgICAgICAgICAgIGxvZy5kZWJ1ZygiUHVibGlzaGluZyBTU0kgTW9kdWxlOiAiICsgaWNzLkdldFZhcigibW9kdWxlX2lkIikpOw0KICAgICAgICAgICAgU2Vzc2lvbiBzZXMgPSBTZXNzaW9uRmFjdG9yeS5nZXRTZXNzaW9uKGljcyk7DQogICAgICAgICAgICBBc3NldERhdGFNYW5hZ2VyIG1nciA9IChBc3NldERhdGFNYW5hZ2VyKSBzZXMuZ2V0TWFuYWdlcihBc3NldERhdGFNYW5hZ2VyLmNsYXNzLmdldE5hbWUoKSApOw0KICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgIElMaXN0IHN0YXRpY1BhZ2VsZXRJTGlzdCA9IG51bGw7DQogICAgICAgICAgICAgICAgc3FsU3RtID0gIlNFTEVDVCBpZCxyZXF1ZXN0IEZST00gc3RhdGljX3BhZ2VsZXQgV0hFUkUgb3duZXJpZD0nIiArIChTdHJpbmcpaWNzLkdldE9iaigic3RhdGljUGFnZWxldElEIikgKyAiJyBBTkQgYXNzZXRpZD0nIiArIGljcy5HZXRWYXIoIm1vZHVsZV9pZCIpICsgIicgQU5EIHRhcmdldGlkPSciICsgaWNzLkdldFZhcigidGFyZ2V0SUQiKSArICInIjsNCiAgICAgICAgICAgICAgICB0YWJsZU5hbWVzID0gInN0YXRpY19wYWdlbGV0IjsNCiAgICAgICAgICAgICAgICBzdGF0aWNQYWdlbGV0SUxpc3QgPSBydW5TUUwoc3FsU3RtLCB0YWJsZU5hbWVzLCBpY3MpOw0KDQogICAgICAgICAgICAgICAgaWYoaWNzLkdldEVycm5vKCkgIT0gLTEwMSAmJiBzdGF0aWNQYWdlbGV0SUxpc3QgIT0gbnVsbCAmJiBzdGF0aWNQYWdlbGV0SUxpc3QubnVtUm93cygpID4gMCl7DQogICAgICAgICAgICAgICAgICAgIGZvciAoSUxpc3Qgcm93IDogbmV3IEl0ZXJhYmxlSUxpc3RXcmFwcGVyKCBzdGF0aWNQYWdlbGV0SUxpc3QpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyBmaWxlUGF0aCA9IHBhdGhQcmVmaXgrU3RyaW5nVXRpbHMuc3RyaXAocm93LmdldFZhbHVlKCJyZXF1ZXN0IiksIi8iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBvbGQgZmlsZXBhdGggZmlyc3QNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZygiRGVsZXRpbmc6ICIgKyBmaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIGlzRGVsZXRlZCA9IGRlbGV0ZUZpbGUoaWNzLCBmaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG1vZHVsZSBjb3VsZG4ndCBiZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCwgdGhlIG1vZHVsZSB3b24ndCBiZSB1cGRhdGVkDQogICAgICAgICAgICAgICAgICAgICAgICBpZighaXNEZWxldGVkKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldHRpbmcgdGhlIGxpbmt1cmwgZm9yIHNzaSBiYWNrIHRvIHRoZSBvbGQgbW9kdWxlIHRoYXQgd2FzIHB1Ymxpc2hlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljcy5TZXRWYXIoImxpbmt1cmwiLCByb3cuZ2V0VmFsdWUoInJlcXVlc3QiKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGZpbGVQYXRoICsgIiBjb3VsZCBub3QgYmUgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQuIE1vZHVsZToiICsgaWNzLkdldFZhcigibW9kdWxlX2lkIikgKyAiIHdvbid0IGJlIHVwZGF0ZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb2xkIG1vZHVsZSB3YXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQsIGhlbmNlIHB1Ymxpc2hpbmcgbmV3IG1vZHVsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy50cmFjZSgiQXR0ZW1wdGluZyB0byB3cml0ZSBhbiB1cGRhdGVkIG1vZHVsZSB0byAiICsgcGF0aFByZWZpeCtTdHJpbmdVdGlscy5zdHJpcChpY3MuR2V0VmFyKCJsaW5rdXJsIiksIi8iKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZVV0aWxzLndyaXRlU3RyaW5nVG9GaWxlKG5ldyBGaWxlKHBhdGhQcmVmaXgrU3RyaW5nVXRpbHMuc3RyaXAoaWNzLkdldFZhcigibGlua3VybCIpLCIvIikpLCB0aGVQYWdlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdGVyYWJsZTxBc3NldERhdGE+IGFzc2V0cyA9IG1nci5yZWFkKCBBcnJheXMuPEFzc2V0SWQ+YXNMaXN0KCBuZXcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzc2V0SWRJbXBsKCAic3RhdGljX3BhZ2VsZXQiLCBMb25nLnBhcnNlTG9uZyhyb3cuZ2V0VmFsdWUoImlkIikpICkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0PEFzc2V0RGF0YT4gc0Fzc2V0cyA9IG5ldyBBcnJheUxpc3Q8QXNzZXREYXRhPigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIEFzc2V0RGF0YSBhIDogYXNzZXRzICkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNBc3NldHMuYWRkKCBhICk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKFN0cmluZ1V0aWxzLmlzTm90QmxhbmsodGVtcGxhdGVBcmdzKSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdldEF0dHJpYnV0ZURhdGEoInRlbXBsYXRlX2FyZ3MiKS5zZXREYXRhKHRlbXBsYXRlQXJncyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb2RpZmllZDogcmdpbGwsIDIwMTAtMDktMTcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5naW5nLCBpY3MuR2V0U1NWYXIoInB1YnNlc3M6aWQiKSB0byAoU3RyaW5nKWljcy5HZXRPYmooInB1YnNlc3M6aWQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nVXRpbHMuY29udGFpbnMoaWNzLkdldFZhcigibGlua3VybCIpLCAiXyIpICYmIFN0cmluZ1V0aWxzLmlzTm90QmxhbmsoKFN0cmluZylpY3MuR2V0T2JqKCJzdGF0aWNQYWdlbGV0SUQiKSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0QXR0cmlidXRlRGF0YSgib3duZXJpZCIpLnNldERhdGEoKFN0cmluZylpY3MuR2V0T2JqKCJzdGF0aWNQYWdlbGV0SUQiKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0QXR0cmlidXRlRGF0YSgib3duZXJpZCIpLnNldERhdGEoIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5nZXRBdHRyaWJ1dGVEYXRhKCJwdWJzZXNzaW9uaWQiKS5zZXREYXRhKChTdHJpbmcpaWNzLkdldE9iaigicHVic2VzczppZCIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdldEF0dHJpYnV0ZURhdGEoICJ0ZW1wbGF0ZSIgKS5zZXREYXRhKFN0cmluZ1V0aWxzLnN0cmlwKHRlbXBsYXRlX25hbWUsICIvIikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdldEF0dHJpYnV0ZURhdGEoICJyZXF1ZXN0IiApLnNldERhdGEoIGljcy5HZXRWYXIoImxpbmt1cmwiKSApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZ3IudXBkYXRlKCBzQXNzZXRzICk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgaWNzLkNsZWFyRXJybm8oKTsNCiAgICAgICAgICAgICAgICAgICAgbG9nLnRyYWNlKCJBdHRlbXB0aW5nIHRvIHdyaXRlIHRoZSBuZXcgbW9kdWxlIHRvICIgKyBwYXRoUHJlZml4K1N0cmluZ1V0aWxzLnN0cmlwKGljcy5HZXRWYXIoImxpbmt1cmwiKSwiLyIpKTsNCiAgICAgICAgICAgICAgICAgICAgRmlsZVV0aWxzLndyaXRlU3RyaW5nVG9GaWxlKG5ldyBGaWxlKHBhdGhQcmVmaXgrU3RyaW5nVXRpbHMuc3RyaXAoaWNzLkdldFZhcigibGlua3VybCIpLCIvIikpLCB0aGVQYWdlKTsNCg0KICAgICAgICAgICAgICAgICAgICBNdXRhYmxlQXNzZXREYXRhIGFzc2V0RGF0YSA9IG1nci5uZXdBc3NldERhdGEoInN0YXRpY19wYWdlbGV0IiwiIik7DQogICAgICAgICAgICAgICAgICAgIGFzc2V0RGF0YS5nZXRBdHRyaWJ1dGVEYXRhKCJuYW1lIikuc2V0RGF0YShpY3MuR2V0VmFyKCJtb2R1bGVfaWQiKSk7DQogICAgICAgICAgICAgICAgICAgIGFzc2V0RGF0YS5nZXRBdHRyaWJ1dGVEYXRhKCJyZXF1ZXN0Iikuc2V0RGF0YShpY3MuR2V0VmFyKCJsaW5rdXJsIikpOw0KICAgICAgICAgICAgICAgICAgICBhc3NldERhdGEuZ2V0QXR0cmlidXRlRGF0YSgiYXNzZXRpZCIpLnNldERhdGEoaWNzLkdldFZhcigibW9kdWxlX2lkIikpOw0KICAgICAgICAgICAgICAgICAgICBhc3NldERhdGEuZ2V0QXR0cmlidXRlRGF0YSgiYXNzZXR0eXBlIikuc2V0RGF0YSgiR1VfTW9kdWxlX0MiKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nVXRpbHMuY29udGFpbnMoaWNzLkdldFZhcigibGlua3VybCIpLCAiXyIpICYmIFN0cmluZ1V0aWxzLmlzTm90QmxhbmsoKFN0cmluZylpY3MuR2V0T2JqKCJzdGF0aWNQYWdlbGV0SUQiKSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXREYXRhLmdldEF0dHJpYnV0ZURhdGEoIm93bmVyaWQiKS5zZXREYXRhKChTdHJpbmcpaWNzLkdldE9iaigic3RhdGljUGFnZWxldElEIikpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGFzc2V0RGF0YS5nZXRBdHRyaWJ1dGVEYXRhKCJ0ZW1wbGF0ZSIpLnNldERhdGEoU3RyaW5nVXRpbHMuc3RyaXAodGVtcGxhdGVfbmFtZSwgIi8iKSk7DQogICAgICAgICAgICAgICAgICAgIGlmKFN0cmluZ1V0aWxzLmlzTm90QmxhbmsodGVtcGxhdGVBcmdzKSl7DQogICAgICAgICAgICAgICAgICAgICAgICBhc3NldERhdGEuZ2V0QXR0cmlidXRlRGF0YSgidGVtcGxhdGVfYXJncyIpLnNldERhdGEodGVtcGxhdGVBcmdzKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBhc3NldERhdGEuZ2V0QXR0cmlidXRlRGF0YSgidGFyZ2V0aWQiKS5zZXREYXRhKGljcy5HZXRWYXIoInRhcmdldElEIikpOw0KICAgICAgICAgICAgICAgICAgICBhc3NldERhdGEuZ2V0QXR0cmlidXRlRGF0YSggIlB1Ymxpc3QiICkuc2V0RGF0YSggQXJyYXlzLmFzTGlzdChpY3MuR2V0VmFyKCJzaXRlIikgKSApOw0KICAgICAgICAgICAgICAgICAgICAvLyBNb2RpZmllZDogcmdpbGwsIDIwMTAtMDktMTcNCiAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdpbmcsIGljcy5HZXRTU1ZhcigicHVic2VzczppZCIpIHRvIChTdHJpbmcpaWNzLkdldE9iaigicHVic2VzczppZCIpDQogICAgICAgICAgICAgICAgICAgIGFzc2V0RGF0YS5nZXRBdHRyaWJ1dGVEYXRhKCJwdWJzZXNzaW9uaWQiKS5zZXREYXRhKChTdHJpbmcpaWNzLkdldE9iaigicHVic2VzczppZCIpKTsNCg0KICAgICAgICAgICAgICAgICAgICBtZ3IuaW5zZXJ0KEFycmF5cy48QXNzZXREYXRhPmFzTGlzdChhc3NldERhdGEpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpew0KICAgICAgICAgICAgICAgIGljcy5TZXRPYmooImhhc0Vycm9yIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoIkVycm9yIG9jY3VycmVkIGluIGNvbnZlcnRpbmcgc3RhdGljX3BhZ2VsZXQgaWQgdG8gTG9uZyIpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuZ2V0U3RhY2tUcmFjZSgpLnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKE5vU3VjaEZpZWxkRXhjZXB0aW9uIGUpew0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcigiRXJyb3Igb2NjdXJyZWQgaW4gcmV0cmlldmluZyBpZCBvciByZXF1ZXN0IGZyb20gbW9kdWxlZGlwYXRjaGVyIik7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZS5nZXRTdGFja1RyYWNlKCkudG9TdHJpbmcoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoSU9FeGNlcHRpb24gZSl7DQogICAgICAgICAgICAgICAgaWNzLlNldE9iaigiaGFzRXJyb3IiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcigiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgd3JpdGluZyB0byAiICsgcGF0aFByZWZpeCtTdHJpbmdVdGlscy5zdHJpcChpY3MuR2V0VmFyKCJsaW5rdXJsIiksIi8iKSk7DQogICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZS5nZXRTdGFja1RyYWNlKCkudG9TdHJpbmcoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoQXNzZXRBY2Nlc3NFeGNlcHRpb24gZSl7DQogICAgICAgICAgICAgICAgaWNzLlNldE9iaigiaGFzRXJyb3IiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcigiRXJyb3Igb2NjdXJyZWQgaW4gdXBkYXRpbmcgc3RhdGljX3BhZ2VsZXQiKTsNCiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZS5nZXRNZXNzYWdlKCkpOw0KICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlLmdldFN0YWNrVHJhY2UoKS50b1N0cmluZygpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiU+PC9jczpmdGNzPg==";
                    
        
        byte[] o = x.getBytes("UTF-8");
        System.out.println(o.length);
        long len = (o.length * 3) / 4;
        System.out.println(len);
        System.out.println(x.length());
        
        byte[] b = Base64.decode(x);
        System.out.println(b.length);
        System.out.println(new String(b,b.length-500,500));
        
        String y = Base64.encode(b);
        System.out.println(y.length());
        assertEquals(x,y);
        
        
    }
    public void testEncode() throws IOException {
        byte[] b = FileUtils.readFileToByteArray(new File("/data/code/java/rest/fw-rest-sample/src/test/resources/base64-test.bin"));
        String y = Base64.encode(b);
        int t=y.indexOf("==");
        System.out.println(y);
        if (t > 0 && t< y.length()-20){
            
            System.out.println(y.substring(t-20,40));
        }
        
        assertEquals(x,y);
    }
}
